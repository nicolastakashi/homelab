apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-collector-agent
  namespace: {{ .Release.Namespace }}
spec:
  mode: daemonset
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  volumeMounts:
    - mountPath: /hostfs
      mountPropagation: HostToContainer
      name: hostfs
      readOnly: true
  volumes:
    - hostPath:
        path: /
      name: hostfs
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      hostmetrics:
        collection_interval: 30s
        root_path: /hostfs
        normalizeProcessCPUUtilization: true
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          load:
            metrics:
              system.cpu.load_average.1m:
                enabled: true
              system.cpu.load_average.5m:
                enabled: true
              system.cpu.load_average.15m:
                enabled: true
          filesystem:
            exclude_fs_types:
              fs_types:
                - autofs
                - binfmt_misc
                - bpf
                - cgroup2
                - configfs
                - debugfs
                - devpts
                - devtmpfs
                - fusectl
                - hugetlbfs
                - iso9660
                - mqueue
                - nsfs
                - overlay
                - proc
                - procfs
                - pstore
                - rpc_pipefs
                - securityfs
                - selinuxfs
                - squashfs
                - sysfs
                - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
                - /dev/*
                - /proc/*
                - /sys/*
                - /run/k3s/containerd/*
                - /run/containerd/runc/*
                - /var/lib/docker/*
                - /var/lib/kubelet/*
                - /snap/*
          memory:
            metrics:
              system.memory.limit:
                enabled: true
              system.memory.utilization:
                enabled: true
          network:
    extensions:
      health_check: {}
      pprof:
        endpoint: localhost:1777
      zpages:
        endpoint: localhost:55679
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.replicaset.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.pod.name
          - k8s.node.name
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 80
        spike_limit_percentage: 20
      resourcedetection/k8s:
        detectors: [k8snode]
        timeout: 2s
        override: false
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["container"], resource.attributes["k8s.container.name"])
              - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
              - set(attributes["node"], resource.attributes["k8s.node.name"])
              - set(attributes["pod"], resource.attributes["k8s.pod.name"])
    exporters:
      debug:
        verbosity: detailed
      prometheusremotewrite:
        endpoint: "http://thanos-receive.thanos.svc.cluster.local:19291/api/v1/receive"
        tls:
          insecure: true
    service:
      telemetry:
        logs:
          level: "info"
        metrics:
          address: ${MY_POD_IP}:8888
      extensions:
        - health_check
        - pprof
        - zpages
      pipelines:
        metrics:
          receivers:
            - hostmetrics
          processors:
            - memory_limiter
            - k8sattributes
            - resourcedetection/k8s
            - transform
            - batch
          exporters:
            - prometheusremotewrite