apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-collector-cluster
  namespace: {{ .Release.Namespace }}
spec:
  mode: deployment
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  volumeMounts:
    - mountPath: /hostfs
      mountPropagation: HostToContainer
      name: hostfs
      readOnly: true
  volumes:
    - hostPath:
        path: /
      name: hostfs
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      k8s_cluster:
        allocatable_types_to_report:
        - cpu
        - memory
        - storage
        - ephemeral-storage
        collection_interval: '30s'
        metrics:
          k8s.pod.status_reason:
            enabled: true
        resource_attributes:
          k8s.container.status.last_terminated_reason:
            enabled: true
          k8s.kubelet.version:
            enabled: true
          k8s.pod.qos_class:
            enabled: true
    extensions:
      health_check: {}
      pprof:
        endpoint: localhost:1777
      zpages:
        endpoint: localhost:55679
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.replicaset.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.pod.name
          - k8s.node.name
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 80
        spike_limit_percentage: 20
      resourcedetection/k8s:
        detectors: [k8snode]
        timeout: 2s
        override: false
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["container"], resource.attributes["k8s.container.name"])
              - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
              - set(attributes["node"], resource.attributes["k8s.node.name"])
              - set(attributes["pod"], resource.attributes["k8s.pod.name"])
    exporters:
      debug:
        verbosity: detailed
      prometheusremotewrite:
        endpoint: "http://thanos-receive.thanos.svc.cluster.local:19291/api/v1/receive"
        tls:
          insecure: true
    service:
      telemetry:
        logs:
          level: "info"
        metrics:
          address: ${MY_POD_IP}:8888
      extensions:
        - health_check
        - pprof
        - zpages
      pipelines:
        metrics:
          receivers:
            - k8s_cluster
          processors:
            - memory_limiter
            - resourcedetection/k8s
            - k8sattributes
            - transform
            - batch
          exporters:
            - prometheusremotewrite