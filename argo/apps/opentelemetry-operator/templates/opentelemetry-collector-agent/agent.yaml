apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-collector-agent
  namespace: {{ .Release.Namespace }}
spec:
  mode: daemonset
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  volumeMounts:
    - mountPath: /hostfs
      mountPropagation: HostToContainer
      name: hostfs
      readOnly: true
  volumes:
    - hostPath:
        path: /
      name: hostfs
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      prometheus:
        report_extra_scrape_metrics: true
        config:
          scrape_configs:
          - job_name: opentelemetry-collector-agent
            scrape_interval: 30s
            static_configs:
            - targets:
              - localhost:8888
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu:
            metrics:
              system.cpu.logical.count:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
              system.memory.limit:
                enabled: true
          load:
          disk:
          filesystem:
            exclude_fs_types:
              fs_types:
                - autofs
                - binfmt_misc
                - bpf
                - cgroup2
                - configfs
                - debugfs
                - devpts
                - devtmpfs
                - fusectl
                - hugetlbfs
                - iso9660
                - mqueue
                - nsfs
                - overlay
                - proc
                - procfs
                - pstore
                - rpc_pipefs
                - securityfs
                - selinuxfs
                - squashfs
                - sysfs
                - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
                - /dev/*
                - /proc/*
                - /sys/*
                - /run/k3s/containerd/*
                - /run/containerd/runc/*
                - /var/lib/docker/*
                - /var/lib/kubelet/*
                - /snap/*
            metrics:
              system.filesystem.utilization:
                enabled: true
          network:
          paging:
          processes:
          process:
            mute_process_user_error: true
            metrics:
              process.cpu.utilization:
                enabled: true
              process.memory.utilization:
                enabled: true
              process.threads:
                enabled: true
              process.paging.faults:
                enabled: true
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 80
        spike_limit_percentage: 20
      batch:
        send_batch_size: 1000
        timeout: 1s
        send_batch_max_size: 1500
      resource:
        attributes:
          - action: upsert
            key: service.namespace
            value: opentelemetry-operator
      attributes:
        actions:
          - key: service.namespace
            action: upsert
            value: opentelemetry-operator
      k8sattributes:
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - container.image.name
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
            - from: resource_attribute
              name: k8s.node.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: connection
      resourcedetection/system:
        detectors: ["system"]
        system:
          hostname_sources: ["os"]
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["host.name"], resource.attributes["host.name"])
              - set(attributes["process.command"], resource.attributes["process.command"])
              - set(attributes["process.command_line"], resource.attributes["process.command_line"])
              - set(attributes["process.executable.name"], resource.attributes["process.executable.name"])
              - set(attributes["process.executable.path"], resource.attributes["process.executable.path"])
              - set(attributes["process.owner"], resource.attributes["process.owner"])
              - set(attributes["process.parent_pid"], resource.attributes["process.parent_pid"])
              - set(attributes["process.pid"], resource.attributes["process.pid"])
              - set(attributes["namespace"], resource.attributes["service.namespace"])
    exporters:
      prometheusremotewrite:
        endpoint: "http://thanos-receive.thanos.svc.cluster.local:19291/api/v1/receive"
        tls:
          insecure: true
    service:
      telemetry:
        metrics:
          level: detailed

      pipelines:
        metrics:
          receivers: 
            - prometheus
            - hostmetrics
          processors:
            - memory_limiter
            - resourcedetection/system
            - resource
            - attributes
            - transform
            - batch
          exporters: 
            - prometheusremotewrite